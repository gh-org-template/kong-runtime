---
  name: Release

  on:
    pull_request:
    push:
      branches:
      - main

  concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ github.event_name == 'pull_request' }}

  jobs:
    release:
      name: Create Release
      runs-on: ubuntu-latest
      outputs:
        published: ${{ steps.release.outputs.published }}
        release-git-tag: ${{ steps.release.outputs.release-git-tag }}
        dry_run: ${{ steps.check.outputs.dry_run }}
      steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 5
          submodules: recursive
          token: ${{ steps.app-token.outputs.token }}
      - name: Determine Dry Run
        id: check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '^(\.env|patches|Dockerfile/)'; then
            echo "Changes detected in .env or ./patches/ or Dockerfile, proceeding with full release."
            echo "dry_run=false" >> $GITHUB_ENV
          else
            echo "No changes detected in .env or ./patches/ or Dockerfile, switching to dry run."
            echo "dry_run=true" >> $GITHUB_ENV
          fi
      - name: Release
        id: release
        uses: ahmadnassri/action-semantic-release@v2.2.8
        with:
          dry: ${{ env.dry_run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    artifacts:
      needs: release
      name: Create Release Artifacts
      strategy:
        matrix:
          architecture: [aarch64, x86_64]
          ostype: [linux-gnu, linux-musl]
      runs-on: ubuntu-latest
      steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ steps.app-token.outputs.token }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Set environment variables
        run: |
          grep -v '^#' .env >> $GITHUB_ENV
          echo "ARCHITECTURE=${{ matrix.architecture }}" >> $GITHUB_ENV
          echo "OSTYPE=${{ matrix.ostype }}" >> $GITHUB_ENV
          echo "REGISTRY=ghcr.io"
      - name: Build and Package
        if: ${{ needs.release.outputs.dry_run == 'false' }}
        run: make build/package
      - name: Log in to the Container registry
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/gh-org-template/kong-runtime
          sep-tags: ' '
          flavor: |
            suffix=-${{ matrix.architecture }}-${{ matrix.ostype }}
          tags: |
            type=sha
            type=ref,event=branch
            type=semver,pattern={{version}},value=${{ needs.release.outputs.release-git-tag }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.release-git-tag }}
            type=raw,value=${{ env.OPENSSL_VERSION }}
      - name: Retag and Push
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        run: |
          for tag in ${{ steps.meta.outputs.tags }}; do \
            docker tag ghcr.io/kong-runtime:build-$ARCHITECTURE-$OSTYPE $tag && \
            docker push $tag; \
          done
      - name: Archive the package
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        run: |
          tar -C package -czvf ${{ matrix.architecture }}-${{ matrix.ostype }}.tar.gz .
      - name: Add Release Artifact to the Github Release
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.release-git-tag }}
          files: ${{ matrix.architecture }}-${{ matrix.ostype }}.tar.gz

    multi-arch:
      needs: [release, artifacts]
      name: Create Release Artifacts
      if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
      strategy:
        matrix:
          ostype: [linux-gnu, linux-musl]
      runs-on: ubuntu-latest
      steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Combine per architecture images into a single multi-arch manifest
        run: |
          docker pull ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-aarch64-${{ matrix.ostype }}
          docker pull ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-x86_64-${{ matrix.ostype }}
          docker manifest create ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-${{ matrix.ostype }} \
            ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-aarch64-${{ matrix.ostype }} \
            ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-x86_64-${{ matrix.ostype }}
          docker manifest push ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-${{ matrix.ostype }}

    done:
      needs: [release, artifacts, multi-arch]
      name: Done
      if: always()
      runs-on: ubuntu-latest
      steps:
      - name: Log in to the Container registry
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a final multi-arch manifest with only linux-gnu
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        run: |
          docker pull ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-aarch64-linux-gnu
          docker pull ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-x86_64-linux-gnu
          docker manifest create ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }} \
            ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-x86_64-linux-gnu \
            ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}-aarch64-linux-gnu
          docker manifest push ghcr.io/gh-org-template/kong-runtime:${{ needs.release.outputs.release-git-tag }}
      - uses: actions/create-github-app-token@v1
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - name: Trigger Update Dockerfile Job on kong-runtime Repository
        if: ${{ needs.release.outputs.published == 'true' && needs.release.outputs.dry_run == 'false' }}
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ steps.app-token.outputs.token }}
          repository: gh-org-template/kong-development
          event-type: update-required
          client-payload: '{"ref":"main"}'
      - name: Check for Failed Jobs
        run: |
          if [[ "${{ needs.release.result }}" == "failure" || "${{ needs.artifacts.result }}" == "failure" || "${{ needs.multi-arch.result }}" == "failure" ]]; then
            echo "One or more jobs failed. Marking release as failed."
            exit 1
          else
            echo "All jobs succeeded or were skipped. Marking release as successful."
          fi
      - run: echo 'done'

    cleanup:
      needs: [release]
      if: failure()
      name: Cleanup Half-Created Release/Tag
      runs-on: ubuntu-latest
      steps:
      - name: Delete GitHub Release
        run: |
          if gh release view ${{ needs.release.outputs.release-git-tag }} >/dev/null 2>&1; then
            gh release delete ${{ needs.release.outputs.release-git-tag }} --yes
          fi
      - name: Delete GitHub Tag
        run: |
          if git show-ref --tags ${{ needs.release.outputs.release-git-tag }}; then
            git tag -d ${{ needs.release.outputs.release-git-tag }}
            git push origin :refs/tags/${{ needs.release.outputs.release-git-tag }}
          fi
